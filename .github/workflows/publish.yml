name: Publish to NuGet

on:
  push:
    branches:
      - 'releases/*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Extract version from branch name
      id: extract_version
      shell: pwsh
      run: |
        $branchName = $env:GITHUB_REF -replace 'refs/heads/releases/', ''
        Write-Output "Branch name is $branchName"
        echo "::set-output name=version::$branchName"

    - name: Find projects
      id: find_projects
      run: |
        PROJECTS=$(find . -name "*.csproj" ! -path "*SimpleQueue.Demo*")
        echo "Found projects:"
        echo "$PROJECTS"
        echo "::set-output name=projects::$PROJECTS"

    - name: Update version in .csproj
      run: |
        NEW_VERSION=${{ steps.extract_version.outputs.version }}
        for proj in ${{ steps.find_projects.outputs.projects }}; do
          echo "Updating version to $NEW_VERSION in $proj"
          sed -i "s|<Version>.*</Version>|<Version>$NEW_VERSION</Version>|g" "$proj"
        done

    - name: Restore dependencies
      run: |
        for proj in ${{ steps.find_projects.outputs.projects }}; do
          dotnet restore "$proj"
        done

    - name: Build
      run: |
        for proj in ${{ steps.find_projects.outputs.projects }}; do
          dotnet build "$proj" --configuration Release --no-restore
        done

    - name: Pack
      run: |
        for proj in ${{ steps.find_projects.outputs.projects }}; do
          dotnet pack "$proj" --configuration Release --no-build --output ./nupkg
        done

    - name: Publish to NuGet
      run: dotnet nuget push ./nupkg/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
